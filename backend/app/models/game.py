from pydantic import BaseModel, Field
from typing import Literal, Optional, List
from datetime import datetime


class CreateGameRequest(BaseModel):
    """Request body for creating a new game room."""

    language: Literal["en", "ko"] = Field(..., description="Language for this game room")
    aiCount: int = Field(..., ge=1, le=2, description="Number of AI impostors (1-2)")
    privacy: Literal["public", "private"] = Field(..., description="Visibility of the room")
    aiModelId: str = Field(..., description="Identifier of the AI model to use for impostors")


class CreateGameResponse(BaseModel):
    """Response returned after successfully creating a game room."""
    gameId: str = Field(..., description="Unique identifier of the created game room")
    aiModelId: str = Field(..., description="Identifier of the AI model assigned to the game")


class PublicGame(BaseModel):
    """A public game listing item returned by GET /games."""
    gameId: str = Field(..., description="Unique identifier of the game room")
    language: Literal["en", "ko"] = Field(..., description="Language of the game room")
    playerCount: int = Field(..., ge=0, description="Current number of players in the room")
    maxPlayers: int = Field(..., ge=1, description="Maximum number of players allowed")
    aiModelId: str = Field(..., description="Identifier of the AI model used in this game")


class VoteRequest(BaseModel):
    """Request body for casting a vote in the voting phase."""
    votedForId: str = Field(..., description="UID of the player being voted for")


class KickPlayerRequest(BaseModel):
    """Request body for the host to kick a player from the room."""
    playerIdToKick: str = Field(..., description="UID of the player to remove")


class MessageResponse(BaseModel):
    """Generic message response for success/confirmation messages."""
    message: str = Field(..., description="Human-readable confirmation or status message")


class SubmitAnswerRequest(BaseModel):
    answer: str


class AiModelInfo(BaseModel):
    """Metadata describing an AI model that can be selected for a game."""

    id: str = Field(..., description="Stable identifier used by the backend to reference the model")
    provider: str = Field(..., description="Name of the model provider (e.g., openai, google)")
    display_name: str = Field(..., description="Human-friendly label for displaying in UIs")
    description: str = Field(..., description="Short summary of the model's strengths/capabilities")


# ===== Analytics Pipeline Schema Models =====

class GameResultPlayer(BaseModel):
    """Player information captured in game results."""
    uid: str = Field(..., description="Player unique identifier (used as foreign key for joins, not for user tracking)")
    gameDisplayName: str = Field(..., description="Nickname used in the game")
    isImpostor: bool = Field(..., description="Whether this player was an AI impostor")
    isEliminated: bool = Field(..., description="Whether this player was eliminated")
    eliminatedInRound: Optional[int] = Field(None, description="Round number when eliminated (if applicable)")


class GameResultAnswer(BaseModel):
    """An answer revealed in a round."""
    playerId: str = Field(..., description="Foreign key to GameResultPlayer.uid")
    playerName: str = Field(..., description="Display name of the player")
    text: str = Field(..., description="The answer text")
    isAI: bool = Field(..., description="Whether this answer was generated by AI")


class GameResultRound(BaseModel):
    """Round information captured in game results."""
    roundNumber: int = Field(..., description="Round number (1-indexed)")
    question: str = Field(..., description="Question asked this round")
    revealedAnswers: List[GameResultAnswer] = Field(default_factory=list, description="All answers revealed in this round")


class GameResultVote(BaseModel):
    """A vote cast during the game. Note: AI players do not vote, only humans."""
    roundNumber: int = Field(..., description="Round in which vote was cast")
    voterId: str = Field(..., description="Foreign key to GameResultPlayer.uid (always a human player)")
    targetId: str = Field(..., description="Foreign key to GameResultPlayer.uid (player being voted for)")
    timestamp: datetime = Field(..., description="When the vote was cast")


class GameResultLastRound(BaseModel):
    """
    Details about how the game ended.

    Note: This model is for analytics/training data only. UI messages should be
    derived from endCondition in the frontend, not stored in the data warehouse.
    """
    eliminatedPlayer: Optional[str] = Field(None, description="UID of player eliminated in final round (None if tie vote)")
    eliminatedRole: Optional[Literal["AI", "Human"]] = Field(None, description="Role of eliminated player (None if tie vote)")
    endCondition: Literal["all_impostors_eliminated", "max_rounds_reached"] = Field(..., description="Enum code for how game ended (for analytics queries)")
    voteCounts: dict[str, int] = Field(default_factory=dict, description="Final round vote tallies {playerId: voteCount}")


class GameResult(BaseModel):
    """
    Complete game result document written to Firestore game_results collection.
    This serves as the staging layer before data is archived to BigQuery.

    Note: UIDs are included as foreign keys for relational joins, not for user tracking.
    """
    gameId: str = Field(..., description="Reference to the original game_rooms document")
    endedAt: datetime = Field(..., description="Timestamp when the game finished")
    language: Literal["en", "ko"] = Field(..., description="Language used in the game")
    aiModelUsed: str = Field(..., description="AI model ID used for impostors")
    winner: Literal["humans", "ai"] = Field(..., description="Which side won the game")
    totalRounds: int = Field(..., description="Number of rounds played before game ended")

    players: List[GameResultPlayer] = Field(..., description="All players who participated")
    rounds: List[GameResultRound] = Field(..., description="History of all rounds played")
    votes: List[GameResultVote] = Field(..., description="All votes cast during the game (AI players do not vote)")
    lastRoundResult: GameResultLastRound = Field(..., description="Details about the final round and game outcome")
