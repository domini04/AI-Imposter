rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the host of the game
    function isGameHost(gameData) {
      return isAuthenticated() &&
             request.auth.uid == gameData.hostId;
    }

    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Game rooms collection
    match /game_rooms/{gameId} {
      // Helper to get game data
      function getGameData() {
        return get(/databases/$(database)/documents/game_rooms/$(gameId)).data;
      }

      // Check if user is a player by iterating through players array
      function isPlayer(gameData) {
        return request.auth.uid in gameData.players[0].uid ||
               request.auth.uid in gameData.players[1].uid ||
               request.auth.uid in gameData.players[2].uid ||
               request.auth.uid in gameData.players[3].uid;
      }

      // Anyone authenticated can read game data (for lobby, joining, etc.)
      allow read: if isAuthenticated();

      // Only authenticated users can create games
      allow create: if isAuthenticated() &&
                       request.resource.data.hostId == request.auth.uid;

      // Only the host can update or delete game state
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() &&
                       request.auth.uid == resource.data.hostId;

      // Messages subcollection - visible messages for all players
      match /messages/{messageId} {
        // All authenticated users can read messages
        // (We relax this temporarily - in production you'd check isPlayer)
        allow read: if isAuthenticated();

        // Players can create messages
        allow create: if isAuthenticated() &&
                         request.resource.data.senderId == request.auth.uid;

        // Messages are immutable once created
        allow update, delete: if false;
      }

      // Pending messages subcollection - hidden until reveal
      match /pending_messages/{messageId} {
        // Players can read their own pending messages only
        allow read: if isAuthenticated() &&
                       request.auth.uid == resource.data.senderId;

        // Players can create pending messages
        allow create: if isAuthenticated() &&
                         request.resource.data.senderId == request.auth.uid;

        // No updates or deletes from frontend
        allow update, delete: if false;
      }
    }

    // Game results collection (for analytics pipeline)
    match /game_results/{resultId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    // Deny all other paths by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
